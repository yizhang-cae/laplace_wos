// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace harmonic_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "examples/harmonic.stan");
    reader.add_event(96, 96, "end", "examples/harmonic.stan");
    return reader;
}

std::vector<double>
rect_boundary_x(std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("xb", "2", 2);
        vector<local_scalar_t__> xb(2);
        stan::math::initialize(xb, DUMMY_VAR__);
        stan::math::fill(xb,DUMMY_VAR__);
        stan::math::assign(xb,static_cast<std::vector<local_scalar_t__> >(stan::math::array_builder<local_scalar_t__ >().add(0.0).add(1.0).array()));


        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(xb);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct rect_boundary_x_functor__ {
            std::vector<double>
    operator()(std::ostream* pstream__) const {
        return rect_boundary_x(pstream__);
    }
};

std::vector<double>
rect_boundary_y(std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 7;
        validate_non_negative_index("yb", "2", 2);
        vector<local_scalar_t__> yb(2);
        stan::math::initialize(yb, DUMMY_VAR__);
        stan::math::fill(yb,DUMMY_VAR__);
        stan::math::assign(yb,static_cast<std::vector<local_scalar_t__> >(stan::math::array_builder<local_scalar_t__ >().add(0.0).add(1.0).array()));


        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(yb);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct rect_boundary_y_functor__ {
            std::vector<double>
    operator()(std::ostream* pstream__) const {
        return rect_boundary_y(pstream__);
    }
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
bc(const T0__& x,
       const T1__& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("xb", "2", 2);
        vector<local_scalar_t__> xb(2);
        stan::math::initialize(xb, DUMMY_VAR__);
        stan::math::fill(xb,DUMMY_VAR__);
        stan::math::assign(xb,rect_boundary_x(pstream__));
        current_statement_begin__ = 12;
        validate_non_negative_index("yb", "2", 2);
        vector<local_scalar_t__> yb(2);
        stan::math::initialize(yb, DUMMY_VAR__);
        stan::math::fill(yb,DUMMY_VAR__);
        stan::math::assign(yb,rect_boundary_y(pstream__));
        current_statement_begin__ = 13;
        local_scalar_t__ val;
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, DUMMY_VAR__);
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 14;
        if (as_bool(logical_eq(x,get_base1(xb,1,"xb",1)))) {

            current_statement_begin__ = 15;
            stan::math::assign(val, 0.0);
        } else if (as_bool(logical_eq(x,get_base1(xb,2,"xb",1)))) {

            current_statement_begin__ = 17;
            stan::math::assign(val, 0.0);
        } else if (as_bool(logical_eq(y,get_base1(yb,1,"yb",1)))) {

            current_statement_begin__ = 19;
            stan::math::assign(val, 0.0);
        } else if (as_bool(logical_eq(y,get_base1(yb,2,"yb",1)))) {

            current_statement_begin__ = 21;
            if (as_bool(logical_lte(x,(2.0 / 3.0)))) {
                current_statement_begin__ = 22;
                stan::math::assign(val, (75 * x));
            } else {
                current_statement_begin__ = 24;
                stan::math::assign(val, (150 * (1 - x)));
            }
        }
        current_statement_begin__ = 26;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct bc_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& x,
       const T1__& y, std::ostream* pstream__) const {
        return bc(x, y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
rectangle_wos_rng(const T0__& x,
                      const T1__& y,
                      const T2__& tol, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 30;
        validate_non_negative_index("xb", "2", 2);
        vector<local_scalar_t__> xb(2);
        stan::math::initialize(xb, DUMMY_VAR__);
        stan::math::fill(xb,DUMMY_VAR__);
        stan::math::assign(xb,rect_boundary_x(pstream__));
        current_statement_begin__ = 31;
        validate_non_negative_index("yb", "2", 2);
        vector<local_scalar_t__> yb(2);
        stan::math::initialize(yb, DUMMY_VAR__);
        stan::math::fill(yb,DUMMY_VAR__);
        stan::math::assign(yb,rect_boundary_y(pstream__));
        current_statement_begin__ = 32;
        validate_non_negative_index("res", "3", 3);
        vector<local_scalar_t__> res(3);
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);
        stan::math::assign(res,static_cast<std::vector<local_scalar_t__> >(stan::math::array_builder<local_scalar_t__ >().add(x).add(y).add(0.0).array()));
        current_statement_begin__ = 33;
        validate_non_negative_index("dist", "4", 4);
        vector<local_scalar_t__> dist(4);
        stan::math::initialize(dist, DUMMY_VAR__);
        stan::math::fill(dist,DUMMY_VAR__);
        stan::math::assign(dist,static_cast<std::vector<local_scalar_t__> >(stan::math::array_builder<local_scalar_t__ >().add((get_base1(xb,2,"xb",1) - get_base1(res,1,"res",1))).add((get_base1(res,1,"res",1) - get_base1(xb,1,"xb",1))).add((get_base1(yb,2,"yb",1) - get_base1(res,2,"res",1))).add((get_base1(res,2,"res",1) - get_base1(yb,1,"yb",1))).array()));
        current_statement_begin__ = 34;
        local_scalar_t__ r;
        (void) r;  // dummy to suppress unused var warning

        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r,DUMMY_VAR__);
        stan::math::assign(r,min(dist));
        current_statement_begin__ = 35;
        local_scalar_t__ val;
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, DUMMY_VAR__);
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 36;
        while (as_bool(logical_gt(r,tol))) {
            {
            current_statement_begin__ = 37;
            local_scalar_t__ theta;
            (void) theta;  // dummy to suppress unused var warning

            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta,DUMMY_VAR__);
            stan::math::assign(theta,uniform_rng(0,(2 * stan::math::pi()), base_rng__));


            current_statement_begin__ = 38;
            stan::math::assign(get_base1_lhs(res,1,"res",1), (get_base1(res,1,"res",1) + (r * stan::math::cos(theta))));
            current_statement_begin__ = 39;
            stan::math::assign(get_base1_lhs(res,2,"res",1), (get_base1(res,2,"res",1) + (r * stan::math::sin(theta))));
            current_statement_begin__ = 40;
            stan::math::assign(dist, static_cast<std::vector<local_scalar_t__> >(stan::math::array_builder<local_scalar_t__ >().add((get_base1(xb,2,"xb",1) - get_base1(res,1,"res",1))).add((get_base1(res,1,"res",1) - get_base1(xb,1,"xb",1))).add((get_base1(yb,2,"yb",1) - get_base1(res,2,"res",1))).add((get_base1(res,2,"res",1) - get_base1(yb,1,"yb",1))).array()));
            current_statement_begin__ = 41;
            stan::math::assign(r, min(dist));
            current_statement_begin__ = 42;
            stan::math::assign(get_base1_lhs(res,3,"res",1), r);
            }
        }
        current_statement_begin__ = 44;
        if (as_bool(logical_lt(get_base1(dist,1,"dist",1),tol))) {

            current_statement_begin__ = 45;
            stan::math::assign(get_base1_lhs(res,1,"res",1), get_base1(xb,2,"xb",1));
        } else if (as_bool(logical_lt(get_base1(dist,2,"dist",1),tol))) {

            current_statement_begin__ = 47;
            stan::math::assign(get_base1_lhs(res,1,"res",1), get_base1(xb,1,"xb",1));
        } else if (as_bool(logical_lt(get_base1(dist,3,"dist",1),tol))) {

            current_statement_begin__ = 49;
            stan::math::assign(get_base1_lhs(res,2,"res",1), get_base1(yb,2,"yb",1));
        } else if (as_bool(logical_lt(get_base1(dist,4,"dist",1),tol))) {

            current_statement_begin__ = 51;
            stan::math::assign(get_base1_lhs(res,2,"res",1), get_base1(yb,1,"yb",1));
        }
        current_statement_begin__ = 53;
        stan::math::assign(val, bc(get_base1(res,1,"res",1),get_base1(res,2,"res",1), pstream__));
        current_statement_begin__ = 54;
        stan::math::assign(get_base1_lhs(res,3,"res",1), val);
        current_statement_begin__ = 55;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct rectangle_wos_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& x,
                      const T1__& y,
                      const T2__& tol, RNG& base_rng__, std::ostream* pstream__) const {
        return rectangle_wos_rng(x, y, tol, base_rng__, pstream__);
    }
};

class harmonic_model : public prob_grad {
private:
    double tolerance;
    int m;
    int n;
    int N;
    vector_d bcsample;
    double x;
    double y;
    double hm;
    double hn;
    double sol;
public:
    harmonic_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    harmonic_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "harmonic_model_namespace::harmonic_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "tolerance", "double", context__.to_vec());
            tolerance = double(0);
            vals_r__ = context__.vals_r("tolerance");
            pos__ = 0;
            tolerance = vals_r__[pos__++];
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 60;
            current_statement_begin__ = 61;
            current_statement_begin__ = 62;
            current_statement_begin__ = 63;
            // initialize data variables
            current_statement_begin__ = 67;
            validate_non_negative_index("bcsample", "N", N);
            bcsample = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            stan::math::fill(bcsample,DUMMY_VAR__);
            current_statement_begin__ = 68;
            x = double(0);
            stan::math::fill(x,DUMMY_VAR__);
            current_statement_begin__ = 69;
            y = double(0);
            stan::math::fill(y,DUMMY_VAR__);
            current_statement_begin__ = 70;
            hm = double(0);
            stan::math::fill(hm,DUMMY_VAR__);
            stan::math::assign(hm,(1.0 / m));
            current_statement_begin__ = 71;
            hn = double(0);
            stan::math::fill(hn,DUMMY_VAR__);
            stan::math::assign(hn,(1.0 / n));
            current_statement_begin__ = 72;
            sol = double(0);
            stan::math::fill(sol,DUMMY_VAR__);

            current_statement_begin__ = 73;
            for (int i = 1; i <= (m + 1); ++i) {

                current_statement_begin__ = 74;
                for (int j = 1; j <= (n + 1); ++j) {

                    current_statement_begin__ = 75;
                    stan::math::assign(x, ((i - 1) * hm));
                    current_statement_begin__ = 76;
                    stan::math::assign(y, ((j - 1) * hn));
                    current_statement_begin__ = 77;
                    for (int k = 1; k <= N; ++k) {

                        current_statement_begin__ = 78;
                        stan::math::assign(get_base1_lhs(bcsample,k,"bcsample",1), rectangle_wos_rng(x,y,tolerance, base_rng__, pstream__));
                    }
                    current_statement_begin__ = 80;
                    stan::math::assign(sol, mean(bcsample));
                    current_statement_begin__ = 81;
                    if (pstream__) {
                        stan_print(pstream__,x);
                        stan_print(pstream__,"   ");
                        stan_print(pstream__,y);
                        stan_print(pstream__,"    ");
                        stan_print(pstream__,sol);
                        *pstream__ << std::endl;
                    }
                }
            }

            // validate transformed data
            current_statement_begin__ = 67;
            current_statement_begin__ = 68;
            current_statement_begin__ = 69;
            current_statement_begin__ = 70;
            current_statement_begin__ = 71;
            current_statement_begin__ = 72;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~harmonic_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "harmonic_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "harmonic_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef harmonic_model_namespace::harmonic_model stan_model;

